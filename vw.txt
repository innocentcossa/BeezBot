from django.http import JsonResponse, HttpResponseForbidden, HttpResponse
from django.views.decorators.csrf import csrf_exempt
import json
from .send_api import send_text_message

from bot.models import lbt_customer, account_balances, lbt_stuff

BANK_DETAILS = "🏦 Bank: ABC Bank\n💳 Account: 1234567890\n🏢 Branch: Masvingo"
VERIFY_TOKEN = "my_secure_verify_token_123"
USER_STATES = {}  # Stores conversation state per user


@csrf_exempt
def webhook(request):
    if request.method == "GET":
        mode = request.GET.get("hub.mode")
        token = request.GET.get("hub.verify_token")
        challenge = request.GET.get("hub.challenge")

        if mode == "subscribe" and token == VERIFY_TOKEN:
            return HttpResponse(challenge)
        else:
            return HttpResponseForbidden("Verification token mismatch")

    elif request.method == "POST":
        try:
            data = json.loads(request.body)
            message_obj = data['entry'][0]['changes'][0]['value']['messages'][0]
            phone = message_obj['from']
            message_type = message_obj.get('type')
            text = message_obj['text']['body'].strip().lower() if message_type == 'text' else ''
            state = USER_STATES.get(phone)

            # Determine role
            is_staff = lbt_stuff.objects.filter(col_stuff_mobi_num=phone).exists()
            is_parent = lbt_customer.objects.filter(col_mobi_num=phone).exists()

            if is_staff:
                role = "staff"
            elif is_parent:
                role = "parent"
            else:
                send_text_message(phone, "❌ Your number is not recognized. Please contact the school office.")
                return JsonResponse({"status": "not recognized"}, status=200)

            # Reset to main menu on greeting
            if text in {"hi", "hello", "hey", "hie", "helo", "menu", "start", "main menu"}:
                USER_STATES[phone] = "main_menu"
                send_text_message(phone, get_main_menu(role))
                return JsonResponse({"status": "menu shown"}, status=200)

            # Handle state transitions
            if not state:
                USER_STATES[phone] = "waiting_confirmation"
                send_text_message(phone,
                    "👋 Welcome to BeezBot!\n👉 Reply with 1 to Proceed."
                )

            elif state == "waiting_confirmation":
                if text == "1":
                    USER_STATES[phone] = "main_menu"
                    send_text_message(phone, get_main_menu(role))
                else:
                    send_text_message(phone, "❓ Please reply with 1 to continue.")

            elif state == "main_menu":
                if text == "1" and role == "staff":
                    USER_STATES[phone] = "awaiting_student_reg"
                    send_text_message(phone, "📝 Please enter the Student's REGISTRATION NUMBER")
                else:
                    response = handle_menu_selection(role, text, phone)
                    send_text_message(phone, response)

            elif state == "awaiting_student_reg":
                reg_no = text.upper()
                balance_msg = get_student_balance_by_reg(reg_no)
                send_text_message(phone, balance_msg)
                USER_STATES[phone] = "main_menu"

            else:
                USER_STATES.pop(phone, None)
                send_text_message(phone, "Session reset. Please send any message to start again.")

        except Exception as e:
            print("Webhook error:", e)

        return JsonResponse({"status": "received"}, status=200)


def get_main_menu(role):
    if role == "staff":
        return (
            "👨‍🏫 *Staff Menu:*\n"
            "1. View Student Fees Balance\n"
            "2. Bank Account Details\n"
            "🔁 Type 'hi' or 'menu' anytime to return here"
        )
    else:
        return (
            "👨‍👩‍👧 *BeezParent Menu:*\n"
            "1. Fees Balance\n"
            "2. Bank Account Details\n"
            "🔁 Type 'hi' or 'menu' anytime to return here"
        )


def handle_menu_selection(role, message, phone):
    if message == "1" and role == "parent":
        try:
            children = lbt_customer.objects.filter(col_mobi_num=phone)
            if not children.exists():
                return "⚠️ No students found associated with your number. Please contact the office."

            response = "💰 *Fees Balances Report*\n\n"
            for child in children:
                balance_record = account_balances.objects.filter(col_cust_no=child.col_cust_no).first()
                if balance_record:
                    balance = float(balance_record.balance)
                    formatted_balance = f"{balance:.2f}"
                    if balance > 0:
                        status_msg = f"🔴 Outstanding balance of ${formatted_balance}\nPlease make payment as early as possible"
                    elif balance < 0:
                        credit_amount = f"({-balance:.2f})"
                        status_msg = f"🟢 Credit of ${credit_amount}\nThis amount will be applied to next term"
                    else:
                        status_msg = "🟢 Account fully paid\nNo balance outstanding"

                    response += (
                        f"*Learner:* {child.col_firstname} {child.col_lastname}\n"
                        f"*Reg No:* {child.col_cust_no}\n"
                        f"*Balance:* ${formatted_balance}\n"
                        f"*Status:* {status_msg}\n\n"
                    )
                else:
                    response += (
                        f"*Learner:* {child.col_firstname} {child.col_lastname}\n"
                        f"*Reg No:* {child.col_cust_no}\n"
                        "⚠️ Balance information not available\n\n"
                    )

            response += "For payment options, select 2 from the main menu"
            return response

        except Exception as e:
            print("Parent balance error:", e)
            return "⚠️ Could not retrieve balances. Please contact the office."

    elif message == "2":
        return f"*Bank Payment Details*\n\n{BANK_DETAILS}\n\nPlease use student name and reg no as reference"

    else:
        return "❌ Invalid selection. Please choose a valid option from the menu."


def get_student_balance_by_reg(reg_no):
    try:
        customer = lbt_customer.objects.get(col_cust_no=reg_no)
        balance_record = account_balances.objects.filter(col_cust_no=reg_no).first()
        if balance_record:
            balance = float(balance_record.balance)
            formatted_balance = f"{balance:.2f}"

            if balance > 0:
                status = f"🔴 Outstanding: ${formatted_balance} (Payment required)"
            elif balance < 0:
                credit = f"{-balance:.2f}"
                status = f"🟢 Credit: ${credit} (Will apply to next term)"
            else:
                status = "🟢 Account settled (No balance)"

            return (
                f"*Student Balance Details*\n\n"
                f"*Name:* {customer.col_firstname} {customer.col_lastname}\n"
                f"*Reg No:* {reg_no}\n"
                f"*Amount:* ${formatted_balance}\n"
                f"*Status:* {status}"
            )
        else:
            return f"⚠️ No balance record found for student {reg_no}."
    except lbt_customer.DoesNotExist:
        return "❌ Student registration number not found. Please check and try again."
    except Exception as e:
        print("Staff balance lookup error:", e)
        return "⚠️ Error retrieving balance. Please try again later."
